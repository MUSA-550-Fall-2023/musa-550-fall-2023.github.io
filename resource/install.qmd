---
title: Installing Python and initial set-up
format:
    html:
        toc: true
        toc-depth: 2
---

{{< var course.number >}} relies on freely available software from the
[Python {{< fa brands python >}}](https://www.python.org/) open-source
ecosystem. This guide will walk you through how to set up your computer
for the course, including downloading and installing Python as well as
the various packages you will need throughout the semester.

By the end of this guide, you'll have Python installed, be able to
launch a [Jupyter notebook](https://jupyter.org/) (the interface for
running Python code), and will be writing your first Python code. Let's
get started!

## Step 1. Installing Python

There are a number of different tools and ways to install Python for new
users. In this course, we'll be using a *package manager* called
[`mamba`](https://mamba.readthedocs.io/en/latest/index.html#) to install
Python and manage dependencies. In the Python ecosystem, package
managers are especially useful, as they greatly simplify the
installation process and ensure all of your dependencies will function
properly.

`mamba` is a drop-in replacement (meaning it has the same functionality)
for a very popular Python package manager called `conda`. We'll use
`mamba` instead of `conda` because it has *signficiantly* better
performance. In my experience, it's not uncommon for it to sometimes
take more than hour to install a list of Python packages with `conda`
but only a few seconds for `mamba` to do the same.

::: callout-tip
Anything you can do with the `conda` tool, you can do with the `mamba`
tool. Outside this class, you'll likely hear about `conda` more often,
since it's the more popular tool at the moment.

As you will see later, we will often refer to the `conda` documentation
to learn about the key concepts behind `conda`/`mamba` and its main
functionality.
:::

The `mamba` tool allows you to easily install Python packages on your
laptop using *environments*. An environment allows you to install
packages for specific purposes and keep those packages isolated from any
other Python packages that might be installed on your laptop. This is
*very useful*, since different versions of packages often don't work
nicely together. We will create an environment for use during this class
that includes all of the Python packages you will need in the course.

In this course, we will use the "mambaforge" distribution of Python,
which includes Python, `mamba`, and a few other essential packages and
dependencies. It also comes pre-configured with
"[conda-forge](https://conda-forge.org/)", a popular,
community-maintained server that makes the most popular Python packages
available for download for free.

::: callout-note
The mambaforge distribution is the `mamba` version of the popular
"[Miniconda](https://docs.conda.io/en/latest/miniconda.html)"
distribution, which is a free, minimal Python installation that just
includes `conda`. Miniconda is a lightweight version of the full
[Anaconda distribution](https://docs.anaconda.com/anaconda/install/).
The differences between the "mini" and "full" versions are outlined
[here](https://docs.conda.io/projects/conda/en/latest/user-guide/install/download.html#anaconda-or-miniconda).

The major difference is that the Anaconda distribution will install more
than 1,500 of the most common scientific Python packages (many more than
we need in this course) and will take up about 3 GB of disk space.
Mambaforge/Miniconda will only install core Python dependencies (as well
as `mamba`/`conda`) and will only take up a much smaller amount of disk
space.
:::

The following page contains the installation files for the mambaforge
distribution:

<https://github.com/conda-forge/miniforge#mambaforge>

Select the appropriate file for your computer's operating system and
click to download the file. The file should be named something like
`Mambaforge-Linux-*`, `Mambaforge-MacOSX-*`, or `Mambaforge-Windows-*`.

The rest of the installation instructions will vary based on your
operating system:

::: indented-callout
**Windows**

-   In the file browser, double-click the `.exe` file that you
    downloaded.
-   Follow the instructions on the screen. If you are unsure about any
    setting, accept the defaults. You can change them later.

**MacOS**

-   Open the Terminal application.

-   Change to the folder to the directory where the `.sh` installer file
    was downloaded (this is usually the "Downloads" folder) by running
    the following command in the Terminal app:

    ``` default
    bash Mambaforge-MacOSX-x86_64.sh
    ```

    or if you have a Mac with the new M2 chips, use:

    ``` default
    bash Mambaforge-MacOSX-arm64.sh
    ```

-   Follow the instructions on the screen. If you are asked about if you
    "wish the installer to initialize Mambaforge by running conda
    init?", type "yes". This will ensure that `mamba` is an available
    command when you open up Terminal.

-   If you are unsure about any setting, accept the defaults. You can
    change them later.

-   To make the changes take effect, close and then re-open your
    terminal window.
:::

## 2. Verify that your Python installation is working

To verify that the install worked, we will run `mamba` from the command
line. The specifics of this will depend on your operating system:

::: indented-callout
**Windows**

Open the **Start** menu, search for and open the "Miniforge Prompt".
This application provides a command line interface where the `mamba`
tool is properly loaded, initialized, and ready to be used.

Note that you **cannot** use the default "Command Prompt" application to
use `mamba` because it doesn't know how to load `mamba` properly.

**MacOS**

The Terminal app should be used on MacOS to use `mamba`. You can also
use any Terminal emulator (such as [iTerm2](https://iterm2.com/)).
Simply open the Terminal application and the `mamb` command should be
ready to use.
:::

Now, let's test your installation. From the command line, run:
`mamba list`. A list of installed packages should be printed to the
screen if the installation was successful.

After you've sucessfully installed the mambaforge distribution, you will
have Python {{< var install.default_python_version >}} installed with a
default environment called "base".

## 3. Create your first Python environment

The `mamba`/`conda` tool allows us to easily install new Python packages
and keep track of which ones we've already installed. I've put together
a list of the packages we'll need in this course (a group of packages is
known as an *environment* in `mamba`-speak). Note that you'll be using
the command line (either the Miniforge Prompt in Windows or Terminal app
in MacOS) to run `mamba` and create your environment.

Throughout this course, we will maintain an environment called
"{{< var install.env_name >}}" to install and manage all of the packages
needed throughout the semester.

The packages in an environment are specified in a file typically called
"environment.yml". The environment file for this course is stored in the
[course-materials](%7B%7B%3C%20var%20course.github_org%20%3E%7D%7D/course-materials)
repository on Github and a copy is also stored in the cloud on
[anaconda.org](https://anaconda.org/pennmusa/%7B%7B%3C%20var%20install.env_name%20%3E%7D%7D/files).

It is recommended to create the '{{< var install.env_name >}}'
environment on your local computer using the environment file stored in
the cloud on anaconda.org. The instructions to do so are as follows:

::: indented-callout
First, we need to make sure the `anaconda-client` package is installed
locally. This will ensure that `mamba` can interface with anaconda.org.
From the command line (Miniforge Prompt on Windows or Terminal on
MacOS), run:

``` default
mamba install anaconda-client -n base
```

This will install the `anaconda-client` package into the default "base"
environment.

Then, create the {{< var install.env_name >}} environment by running:

``` default
mamba env create pennmusa/{{< var install.env_name >}}
```

After this command finishes, all of the packages we need for the course
should be installed. To verify this, you can run `mamba env list` from
the command line to see the installed environments. If everything
worked, you should now see the `'{{< var install.env_name >}}'`
environment listed.
:::

::: callout-note
This semester, we will be using Python version
{{< var install.course_python_version >}}. More information about the
different versions of Python is [available
here](https://devguide.python.org/versions/).
:::

## 4. Activate the course's environment

Once you've created your new environment and installed the Python
packages for the course, you need to tell `mamba` to *activate* it (more
`mamba`-speak) so that you can actually use the packages when you are
writing Python code.

To activate the environment for this course, you can run the following
from the command line (Miniforge Prompt on Windows or Terminal on
MacOS):

```default
mamba activate {{< var install.env_name >}}
```

Now, all of the packages in this environment will be available when we
run Python.

::: callout-important
If you forget to activate the course's environment, you will be using
the default "base" environment. This has some of the packages we will
need, but many will be missing. If you are trying to import Python
packages and get a "ModuleNotFoundError" error, the active environoment
is likely the issue!
:::

## 5. Launching a Jupyter notebook

Throughout the course, we will write, edit, and execute Python code in
files called Jupyter notebooks. These files have an `.ipynb` extension.
Notebooks are documents that combine live runnable code with narrative text, 
images, and interactive visualizations.

An application called
[JupyterLab](https://jupyterlab.readthedocs.io/en/latest/index.html) is
the recommended way to work with these notebook files. JupyterLab is a
browser-based interface that allows users to execute Python in notebook
files. It can also handle all sorts of additional file formats and even
has a built-in command-line feature. The [JupyterLab
guide](./jupyter.qmd) provides much more information about the features
of JupyterLab --- for the moment, we will just focus on launching our
first notebook file.

::: callout-note
There are other interfaces for working with Jupyter notebooks. The
original [Jupyter notebook
application](https://jupyter-notebook.readthedocs.io/en/latest/) has
since been replaced by the more powerful JupyterLab application. Popular
code editors such as VS Code have also [added support for Jupyter
notebooks](https://code.visualstudio.com/docs/datascience/jupyter-notebooks),
although it is important to note that VS Code does not support all
features of notebooks. For this reason, JupyterLab remains the
recommended notebook interface.
:::

The recommended approach for starting a notebook is to use the Miniforge
Prompt on Windows or the Terminal app on MacOS. To do so, we simply need
to activate our `'{{< var install.env_name >}}'` environment and then
start JupyterLab, which is included in the course's environment.

From the command line, first activate the environment:

``` default
mamba activate {{< var install.env_name >}}
```

and then launch JupyterLab

``` default
jupyter lab
```

This will create the local Jupyter server and should launch the
*JupyterLab dashboard* in a browser. If it does not open in a browser,
copy the link that is output by the command into your favorite browser.
Typically, the server will be running at http://localhost:8888. The
dashboard should like look something like this:

<img src="/files/resource/jupyterlab-interface.png" class="img-fluid"/>

On the left, you'll see a file browser for the files in the folder 
where you ran the `jupyter lab` command. On the right you will see the "Launcher", 
which allows you to easily create various types of new files. Click on 
the "Python 3" button under the "Notebook" section and you'll create your
first notebook. Alternatively, you can use the
File -> New -> Notebook option from the menu bar. The new notebook, entitled 
"Untitled.ipynb", is created within the same directory.

Now, let's type the following into the first cell:

```python
print("Hello, World!")
```

Click the ⏵ button in the menu bar of the notebook and you will run
your first Python code in a notebook!

<img src="/files/resource/jupyterlab-hello-world.png" class="img-fluid"/>

::: {.callout-tip}

The Jupyter notebook section of the JupyterLab walks you through each step
of working with notebook files in JupyterLab. Check it out [here](https://jupyterlab.readthedocs.io/en/stable/user/notebook.html),
or find more information in the [JupyterLab guide](./jupyter.qmd). 

:::
