[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Note\n\n\n\nThe schedule is tentative and could change in the future.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGithub Repo\n\n\n\nHTML Slides\n\n\n\nExecutable Slides\n\n\n\n\n\n\n\n\n\n\n\nWeek 1\n\n\n\nExploratory Data Science in Python\n\n\n\n\n\n\n\n\n\n\nWednesday, August 30\n\n\n\nLecture 1A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWednesday, September 6\n\n\n\nLecture 1B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW #1 assigned\n\n\n\n\n\n\n\n\n\n\n\nWeek 2\n\n\n\nData Visualization Fundamentals\n\n\n\n\n\n\n\n\n\n\nMonday, September 11\n\n\n\nLecture 2A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWednesday, September 13\n\n\n\nLecture 2B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 3\n\n\n\nGeospatial Data Analysis and GeoPandas\n\n\n\n\n\n\n\n\n\n\nMonday, September 18\n\n\n\nLecture 3A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWednesday, September 20\n\n\n\nLecture 3B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW #1 due\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW #2 assigned\n\n\n\n\n\n\n\n\n\n\n\nWeek 4\n\n\n\nMore Interactive Data Viz, Working with Raster Datasets\n\n\n\n\n\n\n\n\n\n\nMonday, September 25\n\n\n\nLecture 4A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWednesday, September 27\n\n\n\nLecture 4B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 5\n\n\n\nOpenStreetMap, Urban Networks, and Interactive Web Maps\n\n\n\n\n\n\n\n\n\n\nMonday, October 2\n\n\n\nLecture 5A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWednesday, October 4\n\n\n\nLecture 5B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW #2 due\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW #3 assigned\n\n\n\n\n\n\n\n\n\n\n\nWeek 6\n\n\n\nWeb Scraping\n\n\n\n\n\n\n\n\n\n\nMonday, October 9\n\n\n\nLecture 6A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWednesday, October 11\n\n\n\nLecture 6B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 7\n\n\n\nWorking with APIs\n\n\n\n\n\n\n\n\n\n\nMonday, October 16\n\n\n\nLecture 7A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWednesday, October 18\n\n\n\nLecture 7B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW #3 due\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW #4 assigned\n\n\n\n\n\n\n\n\n\n\n\nWeek 8\n\n\n\nAnalyzing and Visualizing Large Datasets\n\n\n\n\n\n\n\n\n\n\nMonday, October 23\n\n\n\nLecture 8A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWednesday, October 25\n\n\n\nLecture 8B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 9\n\n\n\nGithub Pages, Web Servers, and Dash\n\n\n\n\n\n\n\n\n\n\nMonday, October 30\n\n\n\nLecture 9A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWednesday, November 1\n\n\n\nLecture 9B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW #4 due\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW #5 assigned\n\n\n\n\n\n\n\n\n\n\n\nWeek 10\n\n\n\nFrom Notebooks to the Web: Dashboarding with Panel and the HoloViz Ecosystem\n\n\n\n\n\n\n\n\n\n\nMonday, November 6\n\n\n\nLecture 10A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWednesday, November 8\n\n\n\nLecture 10B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 11\n\n\n\nCase Study: Predicting Home Prices in Philadelphia\n\n\n\n\n\n\n\n\n\n\nMonday, November 13\n\n\n\nLecture 11A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWednesday, November 15\n\n\n\nLecture 11B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 12\n\n\n\nCase Study: Predicting Space/time Rideshare Demand\n\n\n\n\n\n\n\n\n\n\nMonday, November 20\n\n\n\nLecture 12A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW #5 due\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW #6 assigned\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonday, November 27\n\n\n\nLecture 12B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 13\n\n\n\nCase Study: Clustering Analysis in Python\n\n\n\n\n\n\n\n\n\n\nWednesday, November 29\n\n\n\nLecture 13A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonday, December 4\n\n\n\nLecture 13B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW #6 due\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinal project proposal due\n\n\n\n\n\n\n\n\n\n\n\nWeek 14\n\n\n\nCase Study: Advanced Raster Analysis\n\n\n\n\n\n\n\n\n\n\nWednesday, December 6\n\n\n\nLecture 14A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonday, December 11\n\n\n\nLecture 14B\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinals period\n\n\n\n\n\n\n\n\n\n\nWednesday, December 20\n\n\n\nFinal project due"
  },
  {
    "objectID": "resource/install.html",
    "href": "resource/install.html",
    "title": "Installing Python and inital set-up",
    "section": "",
    "text": "MUSA 550 relies on freely available software from the Python  open-source ecosystem. This guide will walk you through how to set up your computer for the course, including downloading and installing Python as well as the various packages you will need throughout the semester.\nBy the end of this guide, you’ll have Python installed, be able to launch a Jupyter notebook (the interface for running Python code), and will be writing your first Python code. Let’s get started!"
  },
  {
    "objectID": "resource/install.html#step-1.-installing-python",
    "href": "resource/install.html#step-1.-installing-python",
    "title": "Installing Python and inital set-up",
    "section": "Step 1. Installing Python",
    "text": "Step 1. Installing Python\nThere are a number of different tools and ways to install Python for new users. In this course, we’ll be using a package manager called mamba to install Python and manage dependencies. In the Python ecosystem, package managers are especially useful, as they greatly simplify the installation process and ensure all of your dependencies will function properly.\nmamba is a drop-in replacement (meaning it has the same functionality) for a very popular Python package manager called conda. We’ll use mamba instead of conda because it has signficiantly better performance. In my experience, it’s not uncommon for it to sometimes take more than hour to install a list of Python packages with conda but only a few seconds for mamba to do the same.\n\n\n\n\n\n\nTip\n\n\n\nAnything you can do with the conda tool, you can do with the mamba tool. Outside this class, you’ll likely hear about conda more often, since it’s the more popular tool at the moment.\nAs you will see later, we will often refer to the conda documentation to learn about the key concepts behind conda/mamba and its main functionality.\n\n\nThe mamba tool allows you to easily install Python packages on your laptop using environments. An environment allows you to install packages for specific purposes and keep those packages isolated from any other Python packages that might be installed on your laptop. This is very useful, since different versions of packages often don’t work nicely together. We will create an environment for use during this class that includes all of the Python packages you will need in the course.\nIn this course, we will use the “mambaforge” distribution of Python, which includes Python, mamba, and a few other essential packages and dependencies. It also comes pre-configured with “conda-forge”, a popular, community-maintained server that makes the most popular Python packages available for download for free.\n\n\n\n\n\n\nNote\n\n\n\nThe mambaforge distribution is the mamba version of the popular “Miniconda” distribution, which is a free, minimal Python installation that just includes conda. Miniconda is a lightweight version of the full Anaconda distribution. The differences between the “mini” and “full” versions are outlined here.\nThe major difference is that the Anaconda distribution will install more than 1,500 of the most common scientific Python packages (many more than we need in this course) and will take up about 3 GB of disk space. Mambaforge/Miniconda will only install core Python dependencies (as well as mamba/conda) and will only take up a much smaller amount of disk space.\n\n\nThe following page contains the installation files for the mambaforge distribution:\nhttps://github.com/conda-forge/miniforge#mambaforge\nSelect the appropriate file for your computer’s operating system and click to download the file. The file should be named something like Mambaforge-Linux-*, Mambaforge-MacOSX-*, or Mambaforge-Windows-*.\nThe rest of the installation instructions will vary based on your operating system:\n\nWindows\n\nIn the file browser, double-click the .exe file that you downloaded.\nFollow the instructions on the screen. If you are unsure about any setting, accept the defaults. You can change them later.\n\nMacOS\n\nOpen the Terminal application.\nChange to the folder to the directory where the .sh installer file was downloaded (this is usually the “Downloads” folder) by running the following command in the Terminal app:\nbash Mambaforge-MacOSX-x86_64.sh\nor if you have a Mac with the new M2 chips, use:\nbash Mambaforge-MacOSX-arm64.sh\nFollow the instructions on the screen. If you are asked about if you “wish the installer to initialize Mambaforge by running conda init?”, type “yes”. This will ensure that mamba is an available command when you open up Terminal.\nIf you are unsure about any setting, accept the defaults. You can change them later.\nTo make the changes take effect, close and then re-open your terminal window."
  },
  {
    "objectID": "resource/install.html#verify-that-your-python-installation-is-working",
    "href": "resource/install.html#verify-that-your-python-installation-is-working",
    "title": "Installing Python and inital set-up",
    "section": "2. Verify that your Python installation is working",
    "text": "2. Verify that your Python installation is working\nTo verify that the install worked, we will run mamba from the command line. The specifics of this will depend on your operating system:\n\nWindows\nOpen the Start menu, search for and open the “Miniforge Prompt”. This application provides a command line interface where the mamba tool is properly loaded, initialized, and ready to be used.\nNote that you cannot use the default “Command Prompt” application to use mamba because it doesn’t know how to load mamba properly.\nMacOS\nThe Terminal app should be used on MacOS to use mamba. You can also use any Terminal emulator (such as iTerm2). Simply open the Terminal application and the mamb command should be ready to use.\n\nNow, let’s test your installation. From the command line, run: mamba list. A list of installed packages should be printed to the screen if the installation was successful.\nAfter you’ve sucessfully installed the mambaforge distribution, you will have Python 3.10 installed with a default environment called “base”."
  },
  {
    "objectID": "resource/install.html#create-your-first-python-environment",
    "href": "resource/install.html#create-your-first-python-environment",
    "title": "Installing Python and inital set-up",
    "section": "3. Create your first Python environment",
    "text": "3. Create your first Python environment\nThe mamba/conda tool allows us to easily install new Python packages and keep track of which ones we’ve already installed. I’ve put together a list of the packages we’ll need in this course (a group of packages is known as an environment in mamba-speak). Note that you’ll be using the command line (either the Miniforge Prompt in Windows or Terminal app in MacOS) to run mamba and create your environment.\nThroughout this course, we will maintain an environment called “musa-550-fall-2023” to install and manage all of the packages needed throughout the semester.\nThe packages in an environment are specified in a file typically called “environment.yml”. The environment file for this course is stored in the course-materials repository on Github and a copy is also stored in the cloud on anaconda.org.\nIt is recommended to create the ‘musa-550-fall-2023’ environment on your local computer using the environment file stored in the cloud on anaconda.org. The instructions to do so are as follows:\n\nFirst, we need to make sure the anaconda-client package is installed locally. This will ensure that mamba can interface with anaconda.org. From the command line (Miniforge Prompt on Windows or Terminal on MacOS), run:\nmamba install anaconda-client -n base\nThis will install the anaconda-client package into the default “base” environment.\nThen, create the musa-550-fall-2023 environment by running:\nmamba env create pennmusa/musa-550-fall-2023\nAfter this command finishes, all of the packages we need for the course should be installed. To verify this, you can run mamba env list from the command line to see the installed environments. If everything worked, you should now see the 'musa-550-fall-2023' environment listed.\n\n\n\n\n\n\n\nNote\n\n\n\nThis semester, we will be using Python version 3.10. More information about the different versions of Python is available here."
  },
  {
    "objectID": "resource/install.html#activate-the-courses-environment",
    "href": "resource/install.html#activate-the-courses-environment",
    "title": "Installing Python and inital set-up",
    "section": "4. Activate the course’s environment",
    "text": "4. Activate the course’s environment\nOnce you’ve created your new environment and installed the Python packages for the course, you need to tell mamba to activate it (more mamba-speak) so that you can actually use the packages when you are writing Python code.\nTo activate the environment for this course, you can run the following from the command line (Miniforge Prompt on Windows or Terminal on MacOS):\nmamba activate musa-550-fall-2023\nNow, all of the packages in this environment will be available when we run Python.\n\n\n\n\n\n\nImportant\n\n\n\nIf you forget to activate the course’s environment, you will be using the default “base” environment. This has some of the packages we will need, but many will be missing. If you are trying to import Python packages and get a “ModuleNotFoundError” error, the active environoment is likely the issue!"
  },
  {
    "objectID": "resource/install.html#launching-a-jupyter-notebook",
    "href": "resource/install.html#launching-a-jupyter-notebook",
    "title": "Installing Python and inital set-up",
    "section": "5. Launching a Jupyter notebook",
    "text": "5. Launching a Jupyter notebook\nThroughout the course, we will write, edit, and execute Python code in files called Jupyter notebooks. These files have an .ipynb extension. Notebooks are documents that combine live runnable code with narrative text, images, and interactive visualizations.\nAn application called JupyterLab is the recommended way to work with these notebook files. JupyterLab is a browser-based interface that allows users to execute Python in notebook files. It can also handle all sorts of additional file formats and even has a built-in command-line feature. The JupyterLab guide provides much more information about the features of JupyterLab — for the moment, we will just focus on launching our first notebook file.\n\n\n\n\n\n\nNote\n\n\n\nThere are other interfaces for working with Jupyter notebooks. The original Jupyter notebook application has since been replaced by the more powerful JupyterLab application. Popular code editors such as VS Code have also added support for Jupyter notebooks, although it is important to note that VS Code does not support all features of notebooks. For this reason, JupyterLab remains the recommended notebook interface.\n\n\nThe recommended approach for starting a notebook is to use the Miniforge Prompt on Windows or the Terminal app on MacOS. To do so, we simply need to activate our 'musa-550-fall-2023' environment and then start JupyterLab, which is included in the course’s environment.\nFrom the command line, first activate the environment:\nmamba activate musa-550-fall-2023\nand then launch JupyterLab\njupyter lab\nThis will create the local Jupyter server and should launch the JupyterLab dashboard in a browser. If it does not open in a browser, copy the link that is output by the command into your favorite browser. Typically, the server will be running at http://localhost:8888. The dashboard should like look something like this:\n\nOn the left, you’ll see a file browser for the files in the folder where you ran the jupyter lab command. On the right you will see the “Launcher”, which allows you to easily create various types of new files. Click on the “Python 3” button under the “Notebook” section and you’ll create your first notebook. Alternatively, you can use the File -&gt; New -&gt; Notebook option from the menu bar. The new notebook, entitled “Untitled.ipynb”, is created within the same directory.\nNow, let’s type the following into the first cell:\nprint(\"Hello, World!\")\nClick the ⏵ button in the menu bar of the notebook and you will run your first Python code in a notebook!\n\n\n\n\n\n\n\nTip\n\n\n\nThe Jupyter notebook section of the JupyterLab walks you through each step of working with notebook files in JupyterLab. Check it out here, or find more information in the JupyterLab guide."
  },
  {
    "objectID": "resource/index.html",
    "href": "resource/index.html",
    "title": "Helpful resources",
    "section": "",
    "text": "This section includes a number of extra resources, cheatsheets, and guides related to software installation, Python, and other relevant topics."
  },
  {
    "objectID": "resource/mamba.html",
    "href": "resource/mamba.html",
    "title": "Using mamba",
    "section": "",
    "text": "In this guide, we’ll outline some of the key concepts and common uses to get you up and running with mamba. A conda cheatsheet is also available under the “Cheatsheets” section in the left sidebar."
  },
  {
    "objectID": "resource/mamba.html#key-concepts",
    "href": "resource/mamba.html#key-concepts",
    "title": "Using mamba",
    "section": "Key Concepts",
    "text": "Key Concepts\n\nCommands\nWe’ll be using the mamba tool through its command-line interface rather than a typical graphical user interface (GUI) application. If you are unfamiliar with the command line, this will take some getting used to but once you get the hang of it, it will make working with mamba and Python much easier.\nThe mamba command is the main interface for using the mamba tool for managing your Python packages. From the command line, you simply run:\nconda command [optional arguments will go here]\nwhere “command” is the name of the command you want to run. Commands exist to install new packages, create new environments, and much more.\n\n\nStarting and running mamba\nWe will run mamba from the command line but the specifics of this will depend on your operating system.\n\nWindows\nOpen the Start menu, search for and open the “Miniforge Prompt”. This application provides a command line interface where the mamba tool is properly load, initialized, and ready to be used. Note that you cannot use the default “Command Prompt” application to use mamba because it doesn’t know how to load mamba properly.\nMacOS\nThe Terminal app should be used on MacOS to use mamba. You can also use any Terminal emulator (such as iTerm2). Simply open the Terminal application and the mamba command should be ready to use.\n\n\n\nChannels\n“Channels” are the locations where packages are located. Channels are typically remote and hosted in the cloud. When you specify a channel, mamba will search the remote database for the right package and download it to your local computer.\nBy default, conda usually downloads packages from the defaults channel, which hosts thousands of packages and is managed by the makers of the Anaconda distribution. A full list of packages is available here.\nThe “mambaforge” distribution that we installed in this course is pre-configured to use a community-managed channel known as “conda-forge” instead of the “defaults” channel. Conda forge includes many of the packages on the “defaults” channel but also popular packages that are widely-used but not quite essential enough for the “defaults” channel. A list of maintained packages is available here.\nFor less well known packages, there is a higher likelihood the package will be hosted on conda forge. For that reason, we will prefer downloading and installing packages from conda forge in this course.\n\n\nEnvironments\nThe mamba tool not only lets you download and install packages, but you can group those packages together into environments. By default, the “mambaforge” Python distribution creates an environment named base. We will create a new environment specifically for this course that will hold all of the packages needed for the entire semester.\nEnvironments become particularly useful when working with lots of packages, packages that have a lot of dependencies, or packages that are difficult to install. When environments become too large, it can be difficult to install a new package that satisfies all of the existing package dependencies. For that reason, we will create a fresh, new environment to install the packages we need to use during this course.\n\n\nConda/mamba vs. pip\nThe other widely used method for installing packages is via the pip command. The commands are similar in a lot of ways but with some key differences. The pip command installs packages from the Python Package Index and is designed to install Python-only packages.\nThe main advantage of conda/mamba is that it is cross-platform and can handle dependencies that are written in C (or other languages) and will automatically handle the compiling process during installation. Many of the packages we use in this course have complex dependencies written in C, and mamba will make installation of these packages much easier.\nIn this course, we’ll be using mamba to install packages. Generally speaking, if you already are using mamba to manage environments, it’s best to try to install packages with mamba and if the package is not available, then try using pip.\nSee this article for more information about conda and pip."
  },
  {
    "objectID": "resource/mamba.html#common-uses",
    "href": "resource/mamba.html#common-uses",
    "title": "Using mamba",
    "section": "Common Uses",
    "text": "Common Uses\nManaging environments and installing packages will be done by executing the mamba command in the command line. Below are some of the most common commands that we will use in this class.\n\n\n\n\n\n\nImportant\n\n\n\nAll of the examples below should be run in the Terminal app (MacOS) or Miniforge Prompt (Windows). See the Starting and running mamba section above for more detail.\n\n\n\nGetting help with the mamba command\nThe mamba command has a built-in help function. From the command line, run,\nmamba --help\nwhich will print out info about individual commands:\nusage: mamba [-h] [-V] command ...\n\nconda is a tool for managing and deploying applications, environments and packages.\n\nOptions:\n\npositional arguments:\n  command\n    clean             Remove unused packages and caches.\n    compare           Compare packages between conda environments.\n    config            Modify configuration values in .condarc. This is modeled after the git config command. Writes to the user .condarc file\n                      (/Users/nhand/.condarc) by default. Use the --show-sources flag to display all identified configuration locations on your computer.\n    create            Create a new conda environment from a list of specified packages.\n    info              Display information about current conda install.\n    init              Initialize conda for shell interaction.\n    install           Installs a list of packages into a specified conda environment.\n    list              List installed packages in a conda environment.\n    package           Low-level conda package utility. (EXPERIMENTAL)\n    remove (uninstall)\n                      Remove a list of packages from a specified conda environment. Use `--all` flag to remove all packages and the environment itself.\n    rename            Renames an existing environment.\n    run               Run an executable in a conda environment.\n    search            Search for packages and display associated information.The input is a MatchSpec, a query language for conda packages. See examples\n                      below.\n    update (upgrade)  Updates conda packages to the latest compatible version.\n    notices           Retrieves latest channel notifications.\n    repoquery         Query repositories using mamba.\n\noptional arguments:\n  -h, --help          Show this help message and exit.\n  -V, --version       Show the conda version number and exit.\nTo find out more info about a specific sub-command, you can run:\nmamba command --help\nFor example, for more info about the arguments (both required and optional) needed to install packages, use: mamba install --help.\n\n\nListing the available environments\nThe default environment when first installing mamba is called 'base'. You can list the currently installed Python environments by running the following command from the command line:\nmamba env list\nThe currently active environment will have a '*' next to it. You should see the 'base' environment as well as any other environments you have created.\n\n\nActivating your environment\nEnvironments must first be “activated” before the packages are available to use. To activate the environment for this course, you can run the following from the command line:\nmamba activate musa-550-fall-2023\nNow, all of the packages in this environment will be available when we run Python.\n\n\nFinding the active environment\nTo see the active environment, list the available environments. The active environment will be listed with a ‘*’ next to its name.\nFrom the command line, run:\nmamba env list\n\n\nListing the installed packages\nIf you have already activated the musa-550-fall-2023 environment, you can list all of the installed packages.\nFrom the command line:\nmamba list\n\n\nActivating the base environment\nTo activate the 'base' default environment, run from the command line:\nmamba activate base\n\n\n\n\n\n\nNote\n\n\n\nYou should always use the ‘musa-550-fall-2023’ environment to do the analysis in this course. Make sure it is the activated environment when using Python.\n\n\n\n\nDeleting an environment\nNote that you cannot create a new environment with the same name as an existing environment. If your environment becomes corrupted or you run into issues, it is often easiest to delete the environment and start over. To do, you can run the following commands from the command line:\nmamba deactivate\nmamba env remove --name musa-550-fall-2023\n\n\nUpdating an existing environment\nThe environment we are using throughout the course might be need to be updated during the course. For example, we might want to update to include a newly released version of a package.\nYou can update your local environment via the following command. From the command line:\nmamba env update pennmusa/musa-550-fall-2023\nThis command will ensure that the ‘musa-550-fall-2023’ environment on your local computer matches the environment specified by the “environment.yml” file stored in the cloud for the course.\n\n\nInstalling specific packages\nYou shouldn’t need to install any individual packages into the ‘musa-550-fall-2023’ environment. But for reference, you could install specific packages into the active environment using from the command line:\nmamba install package_name"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome to the course syllabus for MUSA 550, Geospatial Data Science in Python, taught at the University of Pennsylvania in fall 2023."
  },
  {
    "objectID": "syllabus.html#overview",
    "href": "syllabus.html#overview",
    "title": "Syllabus",
    "section": "Overview",
    "text": "Overview\nThis course will provide students with the knowledge and tools to turn data into meaningful insights, with a focus on real-world case studies in the urban planning and public policy realm. Focusing on the latest Python software tools, the course will outline the “pipeline” approach to data science. It will teach students the tools to gather, visualize, and analyze datasets, providing the skills to effectively explore large datasets and transform results into understandable and compelling narratives. The course is organized into five main sections:\n\nExploratory Data Science: Students will be introduced to the main tools needed to get started analyzing and visualizing data using Python.\nIntroduction to Geospatial Data Science: Building on the previous set of tools, this module will teach students how to work with geospatial datasets using a range of modern Python toolkits.\nData Ingestion & Big Data: Students will learn how to collect new data through web scraping and APIs, as well as how to work effectively with the large datasets often encountered in real-world applications.\nFrom Exploration to Storytelling: With a solid foundation, students will learn the latest tools to present their analysis results using web-based formats to transform their insights into interactive stories.\nGeospatial Data Science in the Wild: Armed with the necessary data science tools, the final module introduces a range of advanced analytic and machine learning techniques using a number of innovative examples from modern researchers."
  },
  {
    "objectID": "syllabus.html#logistics",
    "href": "syllabus.html#logistics",
    "title": "Syllabus",
    "section": "Logistics",
    "text": "Logistics\n\nLecture\nThe course will be conducted in weekly sessions devoted to lectures, interactive demonstrations, and in-class labs.\n\nMonday & Wednesday, 8:30 AM to 10:00 AM\nWilliams Hall, Room 202\n\n\n\nContact Info\n\nInstructor: Nick Hand, nhand@design.upenn.edu\nTeaching Assistant: Teresa Chang, thchang@design.upenn.edu\n\n\n\nOffice Hours\nOffice hours will be by appointment via Zoom — you should be able to sign up for 1 (or more) 15-minute time slot via the Canvas calendar.\nNick:\nTBD\nTeresa:\nTBD\n\n\nCourse Websites\n\nMain website: https://musa-550-fall-2023.github.io\nGithub: https://www.github.com/MUSA-550-Fall-2023\nCanvas: https://canvas.upenn.edu/courses/1740535\nEd Discussion https://edstem.org/us/courses/42616/discussion/\n\nThe course’s main website will be the main source of information, including the course schedule, weekly content, and guides/resources.\nThe course’s Github page will have repositories for each week’s lectures as well as assignments. Students will also submit their assignments through Github.\nWe will use Canvas signing up for office hours and tracking grades.\nEd Discussion is a Q&A forum that allows students to ask questions related to lecture materials and assignments.\n\n\nAssignments\nThere are six homework assignments and one required final project at the end of the semester. While you are required to submit all six assignments, the assignment with the lowest grade will not count towards your final grade.\nFor the final project, students will replicate the pipeline approach on a dataset (or datasets) of their choosing. Students will be required to use several of the analysis techniques taught in the class and produce a web-based data visualization that effectively communicates the empirical results to a non-technical audience. The final product should also include a description of the methods used in each step of the data science process (collection, analysis, and visualization).\nFor more details on the final project, see the Github repository.\n\n\nGrading\nThe grading breakdown is as follows: 55% for homework; 45% for final project, 5% for participation. Your participation grade will be determined by your activity on Ed Discussion — both asking, answering, and reading questions.\nWhile you are required to submit all six assignments, the assignment with the lowest grade will not count towards your final grade.\nThere’s no penalty for late assignments. I would highly recommend staying caught up on lectures and assignments as much as possible, but if you need to turn something in a few days late, that’s fine — there’s no penalty. If you turn in something late, you’ll be missing out on valuable feedback, but that’s the only practical penalty, there’s no extra penalty to your grade.\n\n\nSoftware\nThis course relies on use of Python and various related packages and for geospatial topics. All software is open-source and freely available. The course will require a working installation of Python on your local computer. See the Installation Setup Guide for instructions on how to setup your computer for use in this course."
  },
  {
    "objectID": "syllabus.html#policies",
    "href": "syllabus.html#policies",
    "title": "Syllabus",
    "section": "Policies",
    "text": "Policies\nMUSA 550 is a fast-paced course that covers a lot of topics in a short amount of time. I know that it can be overwhelming and frustrating, particularly as you are trying to learn Python syntax and the topics in the course at the same time. But I firmly believe that all students can succeed in this class.\nYou’ll get the most out of the course if you stay up-to-date on the lectures and assignments. If you fall behind, I know there can be a desire to copy code from the Internet or others to help you complete assignments. Ultimately, this will be detrimental to your progress as an analytics wizard. My goal for this course is for everyone to learn and engage with the material to the best of their ability.\n\nIf you find yourself falling behind or struggling with Python issues, please ask for help by:\n\nPost a question on Canvas — the fix for your problem might be quick and other students are probably experiencing similar issues.\nCome to office hours and discuss issues or larger conceptual questions you are having.\nTake advantage of the free resources to help fine-tine your Python skills.\n\n\nAnd if you are still struggling, reach out and let me know and we’ll figure out a strategy to make things work!\n\nCommunication Policies\n\nPlease add the following text into the subject line of emails to us: [MUSA550]. This will help us make sure we don’t miss your email!\nWe will use Canvas for questions related to lecture material and assignments.\nTo prevent code copying, please do not post long, complete code examples to Canvas.\nAnonymous posting is enabled on Canvas — if you have a question that requires a full code example, please use the anonymous feature to post the question.\nWe will also use Canvas for announcements — please make sure your notifications are turned on and you check the website frequently. This will be the primary method of communication for course-wide announcements.\nIf you have larger-scale or conceptual questions on assignments or lecture material, please set up a time to discuss during office hours.\n\n\n\nGroup Work\nStudents are allowed (and encouraged!) to collaborate when working through lecture materials or assignments. If you work closely with other students, please list the members of your group at the top of your assignment.\n\n\nSpecial Accommodations\nThere are a number of ongoing situations in the world that may take precedence over the course work. If you are experiencing any difficulties outside the course, please contact me and accommodations can be made. Similarly, if you are having any difficulties with the course schedule, attending lectures, or similar, please let us know.\n\n\nAcademic Integrity\nStudents are expected to be familiar with and comply with Penn’s Code of Academic Integrity, which is available in the Pennbook, or online at https://catalog.upenn.edu/pennbook/code-of-academic-integrity."
  },
  {
    "objectID": "assignment/assignment-1.html",
    "href": "assignment/assignment-1.html",
    "title": "HW #1",
    "section": "",
    "text": "Assigned on Wednesday, September 6\n                        \n\n                        \n                            \n                        \n                            \n                        \n                        \n                        Due on Wednesday, September 20 at 11:59 PM\n                        \n\n\n\n    \n        \n         \n        View materials:\n         \n        \n            MUSA-550-Fall-2023/assignment-1\n        \n    \n\n    \n        \n         \n        Submission link:\n         \n        \n            GitHub classroom\n        \n    \n\nCheck back after the homework has been assigned for details."
  },
  {
    "objectID": "assignment/assignment-2.html",
    "href": "assignment/assignment-2.html",
    "title": "HW #2",
    "section": "",
    "text": "Assigned on Wednesday, September 20\n                        \n\n                        \n                            \n                        \n                            \n                        \n                        \n                        Due on Wednesday, October 4 at 11:59 PM\n                        \n\n\n\n    \n        \n         \n        View materials:\n         \n        \n            MUSA-550-Fall-2023/assignment-2\n        \n    \n\n    \n        \n         \n        Submission link:\n         \n        \n            GitHub classroom\n        \n    \n\nCheck back after the homework has been assigned for details."
  },
  {
    "objectID": "assignment/assignment-5.html",
    "href": "assignment/assignment-5.html",
    "title": "HW #5",
    "section": "",
    "text": "Assigned on Wednesday, November 1\n                        \n\n                        \n                            \n                        \n                            \n                        \n                        \n                        Due on Monday, November 20 at 11:59 PM\n                        \n\n\n\n    \n        \n         \n        View materials:\n         \n        \n            MUSA-550-Fall-2023/assignment-5\n        \n    \n\n    \n        \n         \n        Submission link:\n         \n        \n            GitHub classroom\n        \n    \n\nCheck back after the homework has been assigned for details."
  },
  {
    "objectID": "assignment/final-project.html",
    "href": "assignment/final-project.html",
    "title": "Final Project",
    "section": "",
    "text": "Due on Wednesday, December 20 at 11:59 PM\n                        \n\n\n\n    \n        \n         \n        View materials:\n         \n        \n            MUSA-550-Fall-2023/final-project\n        \n    \n\n    \n        \n         \n        Submission link:\n         \n        \n            GitHub classroom\n        \n    \n\nCheck back after the homework has been assigned for details."
  },
  {
    "objectID": "assignment/index.html",
    "href": "assignment/index.html",
    "title": "Overview",
    "section": "",
    "text": "There are six homework assignments due throughout the semester and one final project that is due at the end of the finals period. For grading purposes, the assignment with the lowest grade will not count towards your final grade."
  },
  {
    "objectID": "assignment/index.html#schedule",
    "href": "assignment/index.html#schedule",
    "title": "Overview",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\n\nNote\n\n\n\nThe schedule is tentative and could change in the future.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAssigned on\n\n\n\nDue on\n\n\n\n\n\n\n\n\n\n\n\nHW #1\n\n\n\nWednesday, September 6\n\n\n\nWednesday, September 20\n\n\n\n\n\n\n\nHW #2\n\n\n\nWednesday, September 20\n\n\n\nWednesday, October 4\n\n\n\n\n\n\n\nHW #3\n\n\n\nWednesday, October 4\n\n\n\nWednesday, October 18\n\n\n\n\n\n\n\nHW #4\n\n\n\nWednesday, October 18\n\n\n\nWednesday, November 1\n\n\n\n\n\n\n\nHW #5\n\n\n\nWednesday, November 1\n\n\n\nMonday, November 20\n\n\n\n\n\n\n\nHW #6\n\n\n\nMonday, November 20\n\n\n\nMonday, December 4\n\n\n\n\n\n\n\nFinal project proposal\n\n\n\n\n\n\nMonday, December 4\n\n\n\n\n\n\n\nFinal project\n\n\n\n\n\n\nWednesday, December 20"
  },
  {
    "objectID": "assignment/index.html#guidelines",
    "href": "assignment/index.html#guidelines",
    "title": "Overview",
    "section": "Guidelines",
    "text": "Guidelines\nWe will be using Jupyter notebook files for assignments. Below are a few guidelines to make this process as smooth as possible.\n1. Notebook files should be a polished, finished product.\n\nPlease be sure that your name (as well as the names of anyone you worked with) is listed at the top of the notebook file you submit.\nPlease remove any extra or unneccesary code.\nWhen possible, use markdown cells for comments or add comments directly to your Python code to help explain the steps in your analysis.\nSection headers in markdown can also be helpful to mark different sections of the analysis.\n\n2. Notebook files should be reproducible and executable.\n\nEnsure that your assignments can be executed from top to bottom and produce the desired result. This is how our course TAs will grade each assignment.\nIf your analysis loads a dataset, make sure you either A) Add the dataset to the repository, or B) document the original source of the data so it can be downloaded during grading.\nMake sure you are using relative file paths when loading your data so that the TA can download your repository and the file structure will still work. For more information, check out the guide on file paths."
  },
  {
    "objectID": "assignment/index.html#submission",
    "href": "assignment/index.html#submission",
    "title": "Overview",
    "section": "Submission",
    "text": "Submission\nWe’ll be using GitHub Classroom to submit homework assignments. For each assignment, be on the look out for the submission url, which will always start with the following: https://classroom.github.com/.\nWhen you click on this submission link for each assignment, you will be prompted to log in to GitHub, and then a unique, private repository will be created on the course’s GitHub page. You will create a new private repository for each assignment. Only you and the instructors will be able to view these repositories.\nWe will be using Jupyter notebook files for assignments, and you should add your notebook to your newly created assignment repository before the deadline. You can add files to the repository through the browser (github.com) interface or using the command line locally on your machine. For more help, see these instructions."
  },
  {
    "objectID": "content/week-1/index.html",
    "href": "content/week-1/index.html",
    "title": "Week 1: Exploratory Data Science in Python",
    "section": "",
    "text": "Content for lectures 1A (Aug. 30) and 1B (Sep. 6)\n\n\n        \n            \n             \n            View materials:\n             \n            MUSA-550-Fall-2023/week-1\n        \n\n        \n            \n             \n            HTML slides:\n             \n            \n                Lecture 1A\n            \n             \n            \n                Lecture 1B\n            \n        \n        \n\n        \n            \n             \n            Executable slides:\n             \n            \n                Lecture 1A\n            \n             \n            \n                Lecture 1B"
  },
  {
    "objectID": "content/index.html",
    "href": "content/index.html",
    "title": "Weekly Course Content",
    "section": "",
    "text": "As detailed on the schedule page, the course will be broken up into 14 weeks of content, and each week will have two lectures (cleverly labeled “A” and “B”) that cover that week’s unique topic. Each week will have a recommended set of readings that will help reinforce the content. As we progress through the semester, you will be able to access the weekly content on the sidebar of this page. For each week, you’ll find information about readings and topics, as well as links to the lecture slides."
  },
  {
    "objectID": "content/index.html#lecture-slides",
    "href": "content/index.html#lecture-slides",
    "title": "Weekly Course Content",
    "section": "Lecture slides",
    "text": "Lecture slides\nThe lecture slides are Jupyter notebook files, a mix of executable Python cells, text, and images. Students have a few different options to access the slide materials:\n\nThe Jupyter notebook files for each week are stored in a repository that is available on the course’s GitHub homepage. On the content page for each week, you will see a link to this repository. Once you navigate to the repository on GitHub, you can download the contents of the repository to your computer and work locally with the notebook files by launching JupyterLab on your laptop. To download the repository contents, look for the green “Code” button and select “Download ZIP”:\n\n\n\n\n\n\n\nYou can also open the lecture slides in an interactive, executable environment using the free Binder service. This service is hosted in the cloud, meaning that the code is not being executed locally on your laptop but instead on Binder’s servers. This can be very convenient, since it doesn’t require you to have the files downloaded to your laptop or your Python environment to be set up yet. On the content page for each week, look for the Binder logo  for links to launch the lectures on Binder.\nOn the content page for each week, there are also links to HTML versions of the lecture slides. Look for the  icon for this version of the slides. Since they are displayed in the browser, they are NOT executable and cannot be changed. This version of the slides is a useful reference tool to look up how we did something in class. During class periods, we recommend that you use options #1 or #2 to view the slides, so that you can follow along and execute slides and participate in any in-class exercises or labs."
  },
  {
    "objectID": "content/week-1/lecture-1A.html",
    "href": "content/week-1/lecture-1A.html",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "",
    "text": "Aug. 30, 2023"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#today",
    "href": "content/week-1/lecture-1A.html#today",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Today",
    "text": "Today\n\nCourse logistics\nUsing Jupyter Notebooks and Jupyter Lab\nIntroduction to Python & Pandas"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#who-am-i",
    "href": "content/week-1/lecture-1A.html#who-am-i",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Who am I?",
    "text": "Who am I?\n\nMy day job\n\nMy name is Nick Hand\nFor the past 5+ years, I have led a small data science team in the City Controller’s Office\nWhat did we do?:\n\nObjective, data-driven analysis of financial policies impacting Philadelphia\nIncreasing transparency through data releases and interactive reports\n\nIn two weeks, I start as a data scientist working at the Consumer Finance Protection Bureau in the federal government\n\nIn my time at the Controller’s Office, we covered a range of policy issues in the city:\n\nAnalysis of the fairness and accuracy of property assessments\nInteractive reports for the City’s cash levels\nAnalysis of the 10-Year Tax Abatement program\nInteractive dashboard of Soda Tax spending\nVisualization of paving & potholes\nSeries on the impact of COVID-19 on Philadelphia’s small businesses and neighborhoods\nVisualization of the City’s most recent budget\nInteractive report on redlining in Philadelphia\nAnalysis of the impact of gun violence on housing prices\nInteractive dashboard of shooting victims in Philadelphia\nInteractive dashboard of neighborhood well-being\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo see more of our work, check out: https://controller.phila.gov/policy-analysis\n\n\n\n\nPreviously:Astrophysics Ph.D. at Berkeley\n\n\n\n\n\n\n\nHow did I get here?\n\nAstrophysics/physics to data science is becoming increasingly common\nLanded a job through Twitter: https://www.parkingjawn.com\n\nDashboard visualization of monthly parking tickets in Philadelphia\nData from OpenDataPhilly\n\n\n\nA nice example of how exploratory analysis + a well-designed dashbord can lead to insights: - The power of cross-filtering: different views of the same data across multiple dimensions - See drop in parking tickets over Jan 24-26, 2016 due to snowstorm\nParking Jawn is not Python based, but dovetails nicely with one of the main goals of the course: &gt; How can we effectively explore and extract insight from complex datasets?"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#course-logistics",
    "href": "content/week-1/lecture-1A.html#course-logistics",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Course logistics",
    "text": "Course logistics\n\nGeneral Info\n\nTwo 90-minute lectures per week — mix of lecturing, interactive demos, and in-class lab time\nMy email: nhand@design.upenn.edu\n\nOffice Hours:\n\n2-hours during the week\nOffice hours will be by appointment and remote via Zoom. You will be able to sign up for 1 (or more) 15-minute time slot via the Canvas calendar.\nTime is to be determined\n\n\nTeaching Assistant: Teresa Chang\n\nEmail: thchang@design.upenn.edu\nOffice hours: TBD\n\n\n\n\nCourse Websites\nCourse has four websites (sorry!). They are:\n\nMain Course: https://musa-550-fall-2023.github.io\nGithub: https://github.com/MUSA-550-Fall-2023\nCanvas: https://canvas.upenn.edu/courses/1740535\nEd Discussion: https://edstem.org/us/courses/42616/discussion/\n\nEach will have its own purpose:\n\nMain course website\n\nCourse schedule with links to weekly slides\nResources for learning Python, setting up software, and dealing with common issues\nGeneral course info and policies\nQuick links to the other websites for the course\n\n\n\nGithub\n\nGithub organization set up for the course\nEach week and assignment will have its own Github repository\nAssignments will also be submitted through Github\n\n\n\nCanvas\n\nWill be used sign up for remote office hours and provide Zoom links for office hours\nGrading will also be tracked here\n\n\n\nEd Discussion\n\nWill be used for question & answer forum for course materials and assignments\nAnnouncements will also be made here so make sure you check frequently or turn on your notifications!\nMain method of communication will be through announcements on this site\nParticipation grade (5% of total grade) will also be determined by user activity on the forum"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#main-course-website-1",
    "href": "content/week-1/lecture-1A.html#main-course-website-1",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Main course website",
    "text": "Main course website\n\n  \n\n\nHighlights\n\nSyllabus\nSchedule\nResources & Guides:\n\nPython resources\nInitial installation guide\n\nWeekly content\nAssignments\nQuick links to Canvas, Ed Discussion, GitHub homepage"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#course-github",
    "href": "content/week-1/lecture-1A.html#course-github",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Course Github",
    "text": "Course Github"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#the-goals-of-this-course",
    "href": "content/week-1/lecture-1A.html#the-goals-of-this-course",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "The goals of this course",
    "text": "The goals of this course\n\nProvide students with the knowledge and tools to turn data into meaningful insights and stories\nFocus on the modern data science tools within the Python ecosystem\nThe pipeline approach to data science:\n\ngathering, storing, analyzing, and visualizing data to tell stories\n\nReal-world applications of analysis techniques in the urban planning and public policy realm"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#what-well-cover",
    "href": "content/week-1/lecture-1A.html#what-well-cover",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "What we’ll cover",
    "text": "What we’ll cover\n\nModule 1\nExploratory Data Science: Students will be introduced to the main tools needed to get started analyzing and visualizing data using Python\n\n\nModule 2\nIntroduction to Geospatial Data Science: Building on the previous set of tools, this module will teach students how to work with geospatial datasets using a range of modern Python toolkits.\n\n\nModule 3\nData Ingestion & Big Data: Students will learn how to collect new data through web scraping and APIs, as well as how to work effectively with the large datasets often encountered in real-world applications.\n\n\nModule 4\nFrom Exploration to Storytelling: With a solid foundation, students will learn the latest tools to present their analysis results using web-based formats to transform their insights into interactive stories.\n\n\nModule 5\nGeospatial Data Science in the Wild: Armed with the necessary data science tools, the final module introduces a range of advanced analytic and machine learning techniques using a number of innovative examples from modern researchers."
  },
  {
    "objectID": "content/week-1/lecture-1A.html#assignments-and-grading",
    "href": "content/week-1/lecture-1A.html#assignments-and-grading",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Assignments and grading",
    "text": "Assignments and grading\n\nGrading:\n\n55% homework\n45% final project\n5% participation (based on class and Ed Discussion participation)\n\nWhile you are required to submit all six assignments, the assignment with the lowest grade will not count towards your final grade.\nThere’s no penalty for late assignments. I would highly recommend staying caught up on lectures and assignments as much as possible, but if you need to turn something in a few days late, there won’t be a penalty.\n\nNote: Homeworks will be assigned (roughly) every two and a half weeks."
  },
  {
    "objectID": "content/week-1/lecture-1A.html#the-course-schedule",
    "href": "content/week-1/lecture-1A.html#the-course-schedule",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "The course schedule",
    "text": "The course schedule\nCheck out the schedule page for the most up-to-date details on lectures, assignment due dates, etc."
  },
  {
    "objectID": "content/week-1/lecture-1A.html#final-project",
    "href": "content/week-1/lecture-1A.html#final-project",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Final project",
    "text": "Final project\nThe final project is to replicate the pipeline approach on a dataset (or datasets) of your choosing.\nStudents will be required to use several of the analysis techniques taught in the class and produce a web-based data visualization that effectively communicates the empirical results to a non-technical audience.\nMore info will be posted here: https://github.com/MUSA-550-Fall-2023/final-project"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#any-questions-so-far",
    "href": "content/week-1/lecture-1A.html#any-questions-so-far",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Any questions so far?",
    "text": "Any questions so far?"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#initial-surveys",
    "href": "content/week-1/lecture-1A.html#initial-surveys",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Initial surveys",
    "text": "Initial surveys\nRoll call: https://bit.ly/musa550-roll-call\nSome initial feedback: https://bit.ly/musa550-initial-feedback"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#the-incredible-growth-of-python",
    "href": "content/week-1/lecture-1A.html#the-incredible-growth-of-python",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "The Incredible Growth of Python",
    "text": "The Incredible Growth of Python\nExample #1: A 2017 analysis of StackOverflow posts"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#the-rise-of-the-jupyter-notebook",
    "href": "content/week-1/lecture-1A.html#the-rise-of-the-jupyter-notebook",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "The rise of the Jupyter notebook",
    "text": "The rise of the Jupyter notebook\n\nThe engine of collaborative data science\n\nFirst started by a physics grad student around 2001\nKnown as the IPython notebook originally\nStarting getting popular in ~2011\nFirst funding received in 2015 — the Jupyter notebook was born\n\n\n\nGoogle searches for Jupyter notebook\n\n\n\nKey features\n\nAimed at “computational narratives” — telling stories with data\nInteractive, reproducible, shareable, user-friendly, visualization-focused\nFully open-source and managed by the community\n\nVery versatile: good for both exploratory data analysis and polished finished products\n\n\n\n\n\n\nImportant\n\n\n\nThe lecture slides in the course will all be Jupyter notebooks. The preferred interface for editing and executing them will be JupyterLab. That’s what I’m using now!\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor more info on Jupyter notebooks and JupyterLab, check out the guide on the course website.\nIn particulary, I strongly encourage you to go through the official documentation for JupyterLab and Jupyter notebooks:\n\nStarting JupyterLab\nThe JupyterLab interface\nThe structure of a notebook document\nThe notebook workflow\nWorking with notebooks in JupyterLab\nWorking with files"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#beyond-the-jupyter-notebook",
    "href": "content/week-1/lecture-1A.html#beyond-the-jupyter-notebook",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Beyond the Jupyter notebook",
    "text": "Beyond the Jupyter notebook\nGoogle Colab is the most popular alternative to Jupyter notebooks.\n\n\nA fancier notebook experience built on top of Jupyter notebook\nRunning in the cloud on Google’s servers\nAn internal Google product that was released publicly\nVery popular for Python-based machine learning, since it provides low-barrier access to GPU resources which can be very helpful for training machine learning models\nWe’ll focus on the open-source Jupyter notebook as the foundation for this course\n\nSee, for example: https://colab.research.google.com/notebooks/welcome.ipynb"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#the-binder-service",
    "href": "content/week-1/lecture-1A.html#the-binder-service",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "The Binder service",
    "text": "The Binder service\nhttps://mybinder.org\n\n\nA free, open-source service, supported by donors\nAllows you to launch a repository of Jupyter notebooks on GitHub in an executable environment in the cloud\nAmazing if you want to make your code immediately reproducible by anyone, anywhere.\nNote: as a free service, it can be a bit slow sometimes"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#class-lectures",
    "href": "content/week-1/lecture-1A.html#class-lectures",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Class lectures",
    "text": "Class lectures\nWeekly lectures are available on Binder! In the README for each week’s repository on GitHub, you will see badges to launch the lecture slides on Binder.\n\n\n\n\nYou can also access these links from the content section of the course website. For example, here is:\nhttps://musa-550-fall-2023.github.io/content/week-1/\n\n\n\n\n\n\n\n\n\nSuggested weekly workflow\n\n\n\n\nSet up local Python environment as part of first homework assignment\nEach week, you will have two options to follow along with lectures:\n\nUsing Binder in the cloud, launching via the button on the week’s repository\nDownload the week’s repository to your laptop and launch the notebook locally\n\nWork on homeworks locally on your laptop — Binder is only a temporary environment (no save features)\n\n\n\nCheck out the content overview page on the main course website for more info!"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#now-to-the-fun-stuff",
    "href": "content/week-1/lecture-1A.html#now-to-the-fun-stuff",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Now to the fun stuff…",
    "text": "Now to the fun stuff…\nJupyter notebooks are a mix of code cells and text cells in Markdown. You can change the type of cell in the top menu bar.\nThis cell is a Markdown cell.\n\n# Comments begin with a \"#\" character in Python\n# A simple code cell\n# SHIFT-ENTER to execute\n\n\nx = 10\nprint(x)\n\n10\n\n\n\nPython data types\n\n# integer\na = 10\n\n# float\nb = 10.5\n\n# string\nc = \"this is a test string\"\n\n# lists\nd = list(range(0, 10))\n\n# booleans\ne = True\n\n# dictionaries\nf = {\"key1\": 1, \"key2\": 2}\n\n\nprint(a)\nprint(b)\nprint(c)\nprint(d)\nprint(e)\nprint(f)\n\n10\n10.5\nthis is a test string\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nTrue\n{'key1': 1, 'key2': 2}\n\n\n\n\n\n\n\n\nNote\n\n\n\nUnlike R, you’ll need to use quotes more often in Python, particularly around strings and keys of dictionaries.\n\n\n\n\nAlternative method for creating a dictionary\nWe can use the dict() function, which is built in to the Python language. More on functions in a bit…\n\nf = dict(key1=1, key2=2, key3=3)\n\nf\n\n{'key1': 1, 'key2': 2, 'key3': 3}\n\n\n\n\nAccessing dictionary values\n\n# Access the value with key 'key1'\nf['key1']\n\n1\n\n\n\n\nAccessing list values\n\nd\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n# Access the second list entry (0 is the first index)\nd[1]  \n\n1\n\n\n\n\nAccessing characters of a string\n\nc\n\n'this is a test string'\n\n\n\n# the first character\nc[0]\n\n't'\n\n\n\n\nIterators and for loops\n\n\n\n\n\n\nImportant\n\n\n\nBe sure to use the right indentation in for loops!\n\n\n\n# Variable that will track the sum\nresult_sum = 0\n\n# Variable i takes on values [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nfor i in range(10):\n    \n    # Indented, so it runs for each iteration of the loop\n    print(i)\n    result_sum = result_sum + i\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\nprint(result_sum)\n\n45\n\n\n\n\nPython’s inline syntax\n\na = range(10) # this is an iterator\n\n\nprint(a)\n\nrange(0, 10)\n\n\nUse the list() function to iterate over it and make it into a list:\n\n# convert it to a list explicitly\na = list(range(10))\n\n# Output it from the cell\na\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n# or use the INLINE syntax; this is the SAME\na = [i for i in range(10)]\n\na\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\nPython functions\ndef function_name(arg1, arg2, arg3):\n    \n    .\n    .\n    .\n    code lines (indented)\n    .\n    .\n    .\n    \n    return result\n\ndef compute_square(x):\n    return x * x\n\n\nsq = compute_square(5)\nprint(sq)\n\n25\n\n\n\n\nKeywords: arguments with a default!\n\ndef compute_product(x, y=5):\n    return x * y\n\n\n# use the default value for y\nprint(compute_product(5))\n\n25\n\n\n\n# specify a y value other than the default\nprint(compute_product(5, 10))\n\n50\n\n\n\n# can also explicitly tell Python which arguments are which\nprint(compute_product(5, y=2))\nprint(compute_product(y=2, x=5))\n\n10\n10\n\n\n\nprint(compute_product(x=5, y=4))\n\n20\n\n\n\n# argument names must match the function signature though!\nprint(compute_product(x=5, z=5))\n\nTypeError: compute_product() got an unexpected keyword argument 'z'\n\n\n\n\nGetting help in the notebook\nUse tab auto-completion and the ? and ?? operators\n\nthis_variable_has_a_long_name = 5\n\n\n# try hitting tab after typing this_ \nthis_variable_has_a_long_name\n\n5\n\n\n\n# Forget how to create a range? --&gt; use the help message\nrange?\n\n\nInit signature: range(self, /, *args, **kwargs)\nDocstring:     \nrange(stop) -&gt; range object\nrange(start, stop[, step]) -&gt; range object\nReturn an object that produces a sequence of integers from start (inclusive)\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\nThese are exactly the valid indices for a list of 4 elements.\nWhen step is given, it specifies the increment (or decrement).\nType:           type\nSubclasses:     \n\n\n\n\n\nPeeking at the source code for a function\nUse the ?? operator\n\n# Lets re-define compute_product() and add a docstring between \"\"\" \"\"\"\ndef compute_product(x, y=5):\n    \"\"\"\n    This computes the product of x and y\n    \n    \n    This is all part of the comment.\n    \"\"\"\n    return x * y\n\n\ncompute_product??\n\n\nSignature: compute_product(x, y=5)\nSource:   \ndef compute_product(x, y=5):\n    \"\"\"\n    This computes the product of x and y\n    \n    \n    This is all part of the comment.\n    \"\"\"\n    return x * y\nFile:      /var/folders/49/ntrr94q12xd4rq8hqdnx96gm0000gn/T/ipykernel_63388/3896936014.py\nType:      function\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe question mark operator gives you access to the help message for any variable or function.\nI use this frequently and it is a great way to understand what a function actually does.\n\n\n\n\nThe JupyterLab Debugger\nYou can enable Debugging mode in JupyterLab by clicking on the “bug” icon in the top right:\n\nThis should open the Debugger panel on the right side of JupyterLab. One of the most useful parts of this panel is the “Variables” section, which gives you the current values of all defined variables in the notebook.\n\n\n\n\n\n\n\nTip\n\n\n\nFor more information on the debugger, see the JupyterLab docs."
  },
  {
    "objectID": "content/week-1/lecture-1A.html#getting-more-python-help",
    "href": "content/week-1/lecture-1A.html#getting-more-python-help",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Getting more Python help",
    "text": "Getting more Python help\nThis was a very brief introduction to Python and Python syntax. We’ll continue practicing and reinforcing the proper syntax throughout the next few weeks, but it can definitely be frustrating. Hang in there!\n\n\n\n\n\n\nImportant: DataCamp Tutorials\n\n\n\nDataCamp is providing 6 months of complimentary access to its courses for students in MUSA 550. Whether you have experience with Python or not, this is a great opportunity to learn the basics of Python and practice your skills.\nIt is strongly recommended that you watch some or all of the introductory videos below to build a stronger Python foundation for the semester. The more advanced, intermediate courses are also great — the more the merrier!\nFor more info, including how to sign up, check out the resources section of the website.\n\n\nAdditional Python resources are listed on our course website under “Resources”\nhttps://musa-550-fall-2023.github.io/resource/python/\nIn addition to the DataCamp videos, there are links to lots of online tutorials:\n\nIntroductory level tutorials\nMore advanced tutorials\nThe r/learnpython subreddit has a great wiki of resources\nThe Berkeley Institute for Data Science has also compiled a number of Python resources"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#one-more-thing-working-outside-the-notebook",
    "href": "content/week-1/lecture-1A.html#one-more-thing-working-outside-the-notebook",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "One more thing: working outside the notebook",
    "text": "One more thing: working outside the notebook\nIn this class, we will almost exclusively work inside Jupyter notebooks — you’ll be writing Python code and doing data analysis directly in the notebook.\nThe more traditional method of using Python is to put your code into a .py file and execute it via the command line (known as the Miniforge/Anaconda Prompt on Windows or Terminal app on MacOS).\nSee this section of the Practical Python Programming tutorial for more info.\n\nThe JupyterLab text editor\nThere is a file called hello_world.py in the repository for week 1. If we execute it, it should print out “Hello, World” to the command line.\nFirst, let’s open up the .py file in the JupyterLab text editor. Double click on the “hello_world.py” item in the file browser on the left:\n\nThis will open the file and allow you to make edits. You should see the following:\n# Our first Python program\nprint(\"Hello World!\")\n\n\n\n\n\n\nTip\n\n\n\nSee the JupyterLab docs for more info on the text editor.\n\n\n\n\nUsing the JupyterLab Terminal\nTo execute the file, we can use the built-in Terminal feature in JupyterLab using the following steps:\n\nBring up the “Launcher” tab by clicking on the blue button with a plus sign in the upper left.\nClick on the “Terminal” button”\nWhen the terminal opens, type the following:\n\npython hello_world.py\nAnd you should see the following output:\nHello World!\nIt should look something like this:"
  },
  {
    "objectID": "content/week-1/lecture-1A.html#code-editors",
    "href": "content/week-1/lecture-1A.html#code-editors",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "Code editors",
    "text": "Code editors\nThe JupyterLab text editor will work in a pinch, but it’s not usually the best option when writing software outside the notebook. Other code editors will provide a nice interface for writing Python code and some even have fancy features, like real-time syntax checking and syntax highlighting.\nMy recommended option is Visual Studio Code."
  },
  {
    "objectID": "content/week-1/lecture-1A.html#see-you-next-week",
    "href": "content/week-1/lecture-1A.html#see-you-next-week",
    "title": "Welcome to MUSA 550:Geospatial Data Science in Python",
    "section": "See you next week!",
    "text": "See you next week!\n\nNo lecture on Monday next week due to Labor Day\nNext class a week from today on Wednesday 9/6"
  },
  {
    "objectID": "assignment/final-project-proposal.html",
    "href": "assignment/final-project-proposal.html",
    "title": "Final Project Proposal",
    "section": "",
    "text": "Due on Monday, December 4 at 11:59 PM\n                        \n\n\n\n    \n        \n         \n        View materials:\n         \n        \n            MUSA-550-Fall-2023/final-project-proposal\n        \n    \n\n    \n        \n         \n        Submission link:\n         \n        \n            GitHub classroom\n        \n    \n\nCheck back after the homework has been assigned for details."
  },
  {
    "objectID": "assignment/assignment-4.html",
    "href": "assignment/assignment-4.html",
    "title": "HW #4",
    "section": "",
    "text": "Assigned on Wednesday, October 18\n                        \n\n                        \n                            \n                        \n                            \n                        \n                        \n                        Due on Wednesday, November 1 at 11:59 PM\n                        \n\n\n\n    \n        \n         \n        View materials:\n         \n        \n            MUSA-550-Fall-2023/assignment-4\n        \n    \n\n    \n        \n         \n        Submission link:\n         \n        \n            GitHub classroom\n        \n    \n\nCheck back after the homework has been assigned for details."
  },
  {
    "objectID": "assignment/assignment-6.html",
    "href": "assignment/assignment-6.html",
    "title": "HW #6",
    "section": "",
    "text": "Assigned on Monday, November 20\n                        \n\n                        \n                            \n                        \n                            \n                        \n                        \n                        Due on Monday, December 4 at 11:59 PM\n                        \n\n\n\n    \n        \n         \n        View materials:\n         \n        \n            MUSA-550-Fall-2023/assignment-6\n        \n    \n\n    \n        \n         \n        Submission link:\n         \n        \n            GitHub classroom\n        \n    \n\nCheck back after the homework has been assigned for details."
  },
  {
    "objectID": "assignment/assignment-3.html",
    "href": "assignment/assignment-3.html",
    "title": "HW #3",
    "section": "",
    "text": "Assigned on Wednesday, October 4\n                        \n\n                        \n                            \n                        \n                            \n                        \n                        \n                        Due on Wednesday, October 18 at 11:59 PM\n                        \n\n\n\n    \n        \n         \n        View materials:\n         \n        \n            MUSA-550-Fall-2023/assignment-3\n        \n    \n\n    \n        \n         \n        Submission link:\n         \n        \n            GitHub classroom\n        \n    \n\nCheck back after the homework has been assigned for details."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Geospatial Data Science",
    "section": "",
    "text": "Geospatial Data Science\n    \n      Use Python to gather, visualize, and analyze geospatial data with an urban planning and public policy focus\n    \n    \n      MUSA 550 • Fall 2023Masters of Urban Spatial AnalyticsWeitzman School of Design, University of Pennsylvania\n    \n  \n  \n    \n      \n        \n      \n    \n  \n\n\n\n\n\nInstructor\n\n   Dr. Nick Hand\n   nhand@design.upenn.edu\n   nicholashand\n\n\n\nCourse details\n\n   Mondays and Wednesdays\n   August 29-December 21, 2023\n   8:30AM-10:00AM\n   Williams Hall 202\n\n\n\nContacting me\nE-mail is the best way to get in contact with me. I will try to respond to all course-related e-mails within 24 hours, although I do have a tiny human 👶 at home, so it may be a bit longer on occassion. Please be patient!"
  },
  {
    "objectID": "resource/jupyter.html",
    "href": "resource/jupyter.html",
    "title": "Using Jupyter notebooks and JupyterLab",
    "section": "",
    "text": "In this course, we will perform most of our Python data analysis in files known as Jupyter notebooks. These files, which have an extension of “.ipynb”, combine live runnable code with narrative text (via the Markdown language), images, interactive visualizations and other rich output.\nTo work with notebook files, we will use an application called JupyterLab. JupyterLab is a browser-based interface that allows users to edit and execute notebook files. It can also handle all sorts of additional file formats and even has a built-in command-line feature.\nOn this page, I’ll discuss two common issues when starting out with Jupyter notebooks and JupyterLab: launching JupyterLab and ensuring the right files are available."
  },
  {
    "objectID": "resource/jupyter.html#launching-jupyterlab",
    "href": "resource/jupyter.html#launching-jupyterlab",
    "title": "Using Jupyter notebooks and JupyterLab",
    "section": "Launching JupyterLab",
    "text": "Launching JupyterLab\nThe recommended approach for starting JupyterLab is to use the Miniforge Prompt on Windows or the Terminal app on MacOS. To do so, we simply need to activate our ‘musa-550-fall-2023’ environment and then launch the notebook.\nFrom the command line, run:\nmamba activate musa-550-fall-2023\njupyter lab\nThis will create the local Jupyter server and should launch the JupyterLab dashboard in a browser. If it does not open in a browser, copy the link that is output by the command into your favorite browser. Typically, the server will be running at http://localhost:8888. The dashboard should like look something like this:\n\nOn the left, you’ll see a file browser for the files in the folder where you ran the jupyter lab command. On the right you will see the “Launcher”, which allows you to easily create various types of new files. Click on the “Python 3” button under the “Notebook” section and you’ll create your first notebook. Alternatively, you can use the File -&gt; New -&gt; Notebook option from the menu bar. The new notebook, entitled “Untitled.ipynb”, is created within the same directory.\nThe “Launcher” also shows you what other actions you can take with JupyterLab, including creating text files, Python files (“.py” files), Markdown files, new terminals or Python consoles. One of the most powerful features of JupyterLab is its ability to handle multiple file formats at once. You can have multiple file types open in the main work area and drag and resize these files to view them all at once, as described here.\n\n\n\n\n\n\nTip\n\n\n\nMore info on the various components of the JupyterLab interface, with several useful videos, is available here."
  },
  {
    "objectID": "resource/jupyter.html#changing-the-jupyterlab-start-up-folder",
    "href": "resource/jupyter.html#changing-the-jupyterlab-start-up-folder",
    "title": "Using Jupyter notebooks and JupyterLab",
    "section": "Changing the JupyterLab start-up folder",
    "text": "Changing the JupyterLab start-up folder\nBy default, JupyterLab launches from the home directory. When you see the file browser on the left of the dashboard, you should see all of the files in this folder.\nWhen working with weekly lectures or assignments, it is easiest to launch JupyterLab from the specific assignment or week folder that you are working on.\nThere are two options to do this:\n\nChange to the desired folder before launching JupyterLab\nUse the “notebook-dir” option to specify the desired folder when launching JupyterLab\n\n\nOption 1\n\nStep 1: Change to the desired directory\nLet’s imagine we want to change to a folder named:\n/Users/YourUserName/MUSA_550 (on a Mac),\nor\nC:\\Users\\YourUserName\\MUSA_550 (on Windows)\nIf you need help finding the folder name’s path, this guide for Windows. (I usually use Method #2). On MacOS, you can use this guide to copy a folder’s path name.\nNext, use the following steps:\nStep 1. On Windows, open the Miniforge Prompt, or on Mac, open the Terminal.\nStep 2. Navigate to the folder where the environment file is located. From the Prompt or Terminal run:\n\nWindows\ncd C:\\Users\\YourUserName\\MUSA_550\nMac\ncd /Users/YourUserName/MUSA_550/\n\n\n\nStep 2: Launch JupyterLab\nNow, type the following command, either in Anaconda Prompt or the Terminal:\njupyter lab\nAnd you should now see the desired files in the file browser on the left sidebar of the JupyterLab interface!\n\n\n\nOption 2\nFrom the command line (Miniforge Prompt or Terminal), we can use the “notebook-dir” option to specify what working directory we want JupyterLab to use. For example, if we want to start from “/Users/YourUserName/MUSA_550/”, we could do:\n\nWindows\njupyter lab --notebook-dir=C:\\Users\\YourUserName\\MUSA_550\nMac\njupyter lab --notebook-dir=/Users/YourUserName/MUSA_550/"
  },
  {
    "objectID": "resource/python.html",
    "href": "resource/python.html",
    "title": "Python resources",
    "section": "",
    "text": "MUSA 550 assumes some general familiarity with programming concepts, but there aren’t any formal Python prerequisites. However, we recommend all students that they use some of the free, online resources for learning Python’s core concepts. Below, we include a number of online resources that are freely available for students in the course."
  },
  {
    "objectID": "resource/python.html#datacamp-courses",
    "href": "resource/python.html#datacamp-courses",
    "title": "Python resources",
    "section": "DataCamp courses",
    "text": "DataCamp courses\nDataCamp is providing 6 months of complimentary access to its courses for students in MUSA 550. Whether you have experience with Python or not, this is a great opportunity to learn the basics of Python and practice your skills.\nIt is strongly recommended that you watch some or all of the introductory videos below to build a stronger Python foundation for the semester. The more advanced, intermediate courses are also great — the more the merrier!\n\n\n\n\n\n\nImportant\n\n\n\nTo gain access, use this unique invite link. You will need to create or sign in to a DataCamp account with an “upenn.edu” email address.\n\n\nIntroductory DataCamp courses include:\n\nIntroduction to Python for Data Science\nPython Data Science Toolbox, Part 1\nPython DataScience Toolbox, Part 2\nIntroduction to NumPy\n\nAnd there are also shorter, free tutorials available on some core Python concepts:\n\nIf/else statements\nFor loops\nWhile loops\n\nA few courses covering more advanced topics include:\n\nIntermediate Python\nWriting functions in Python\n\nThere are also courses available to help reinforce topics we will cover in detail during the semester, including:\n\nData manipulation with pandas\nJoining data with pandas\nIntroduction to Data Visualization with seaborn\nIntroduction to Data Visualization with matplotlib\nIntermediate Data Visualization with seaborn\nSupervised Learning with scikit-learn\n\n\n\n\n\n\n\nTip\n\n\n\nCheck out the full list of available Python courses on DataCamp’s website."
  },
  {
    "objectID": "resource/python.html#introductory-python-tutorials",
    "href": "resource/python.html#introductory-python-tutorials",
    "title": "Python resources",
    "section": "Introductory Python tutorials",
    "text": "Introductory Python tutorials\nThe following tutorials assume no background in Python and provide a fairly comprehensive introduction to Python and its core concepts.\n\nPractical Python Programming by David Beazley\nPython for Social Science (in particular, the first four chapters)\nScientific Python Basics from the Berkeley Institute for Data Science (notebook version)"
  },
  {
    "objectID": "resource/python.html#more-advanced-tutorials",
    "href": "resource/python.html#more-advanced-tutorials",
    "title": "Python resources",
    "section": "More advanced tutorials",
    "text": "More advanced tutorials\nThe The Python Data Science Handbook by Jake VanderPlas is a free, online textbook covering the Python basics needed for this course. It is a bit more advanced than the resources in the previous section and assumes some familiarity with Python.\nIn particular, the first four chapters are excellent:\n\nChapter 1: IPython/Jupyter\nChapter 2: Numpy\nChapter 3: Pandas\nChapter 4: matplotlib\n\nThe data analysis library pandas and the visualization library matplotlib will be covered extensively in this course, but the above chapters provide additional background material on this foundational Python tools.\nNote: You can click on the “Open in Colab” button for each chapter and run the examples interactively in a cloud computing environment directly in the browser (using Google Colab)."
  },
  {
    "objectID": "resource/python.html#additional-resources",
    "href": "resource/python.html#additional-resources",
    "title": "Python resources",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nThe Berkeley Institute for Data Science has compiled a number of Python resources\nThe subreddit r/learnpython is a good place for Python resources — it maintains a comprehensive wiki of resources and tutorials."
  },
  {
    "objectID": "resource/common-issues.html",
    "href": "resource/common-issues.html",
    "title": "Troubleshooting common installation issues",
    "section": "",
    "text": "Having trouble with mamba/conda or your Python installation? You’ve come to the right place. Below, we outline some of the most common issues encountered during local installation of Python packages, as well as the troubleshooting steps to try to fix the issues."
  },
  {
    "objectID": "resource/common-issues.html#common-problems",
    "href": "resource/common-issues.html#common-problems",
    "title": "Troubleshooting common installation issues",
    "section": "Common Problems",
    "text": "Common Problems\nBelow we list some of the most common issues encountered when installing packages with mamba.\n\nMissing package errors\nIf you have successfully followed the steps outlined in the installation guide to create your environment, but receive an ImportError when importing packages, you might have launched the notebook from the 'base' environment instead of the ‘musa-550-fall-2023’ environment. Be sure to activate the ‘musa-550-fall-2023’ environment before launching the notebook.s\n\n\nThe file extension of the environment file on Windows\nBe sure that Windows does not automatically add an .txt extension to your environment.yml file. This will sometimes cause mamba to fail, with a cryptic error:\nSpecNotFound: environment with requirements.txt needs a name\nThe environment file needs to end in .yml. You can change the extension for a file on Windows following these instructions.\n\n\nMixing pip and mamba\nThe command pip can also be used to install Python packages. However, using pip to install packages into a mamba environment can lead to issues. It’s best to stick to using the mamba env update command to update your environment or mamba install package_name to install specific packages.\n\n\nImport errors for geopandas\nWhen importing geopandas, you can sometimes receive errors about missing libraries. This is usually because package versions got mixed up during installation. This can sometimes happen, and geopandas is particularly sensitive to the versions of its dependencies.\nThe best and easiest thing to do to try to solve it is use the steps above to create a fresh environment.\n\n\nNumpy errors\nIf you receive the following error:\nImportError: Something is wrong with the numpy installation. While importing we detected an older version of numpy in ['/path/to/old/version/of/numpy/'']. One method of fixing this is to repeatedly uninstall numpy until none is found, then reinstall this version.\nFrom the Miniforge Prompt (Windows) or Terminal (Mac), run:\nmamba install --force-reinstall --clobber numpy"
  },
  {
    "objectID": "resource/common-issues.html#most-common-fix-install-a-fresh-environment",
    "href": "resource/common-issues.html#most-common-fix-install-a-fresh-environment",
    "title": "Troubleshooting common installation issues",
    "section": "Most common fix: install a fresh environment",
    "text": "Most common fix: install a fresh environment\nUnfortunately, mamba/conda environments can sometimes become corrupted, preventing new packages from being installed or imported into Python properly. Most issues like this can be solved by simply deleting your current environment and starting fresh with a new version.\nThe following steps can be used to try to solve common issues:\n\n\n\n\n\n\nNote\n\n\n\nThe commands here should be executed via the command line, either using the Miniforge Prompt on Windows or the Terminal app on MacOS.\n\n\n\nStep 1: Delete any existing environment\nWe want to create a fresh environment, so you can delete any environment that was giving you issues. If that environment was called ‘musa-550-fall-2023’, you can run the following commands to delete it:\nmamba deactivate\nmamba env remove --name musa-550-fall-2023\nThe first command will make sure the environment we are deleting isn’t active, and then the second command will perform the deletion.\n\n\nStep 2: Create a fresh environment\nFollow the instructions outlined here to create a fresh version of the course website."
  },
  {
    "objectID": "resource/file-paths.html",
    "href": "resource/file-paths.html",
    "title": "File paths and working directories",
    "section": "",
    "text": "Note\n\n\n\nBelow is a guide from one of our course’s previous TAs, Eugene Chong. It does a great job laying out the common issues associated with file paths and Python.\nA common challenge in collaborative data science work is dealing with file paths. A csv on your computer has a different file path than a csv on your colleague’s computer, and if you don’t plan ahead for that, your colleague won’t be able run your code on their computer without making (possibly many) changes.\nThis post contains a suggestion for how to organize your files and a glossary of terms. I’ll update it as things come up. Please let us know any questions!"
  },
  {
    "objectID": "resource/file-paths.html#absolute-v.-relative-file-paths",
    "href": "resource/file-paths.html#absolute-v.-relative-file-paths",
    "title": "File paths and working directories",
    "section": "Absolute v. relative file paths",
    "text": "Absolute v. relative file paths\nProblem: I write pd.read_csv(\"C:/Users/eugene/data.csv\") in my code and send it to a project partner, Gritty. Gritty tries to run it, but it fails, and they have to change the code to pd.read_csv(\"C:/Users/gritty/data.csv\") to make it work. These are known as absolute file paths, which point to the exact location of a file on a computer, and generally they make it difficult to share code.\nOne way to deal with this is to organize your projects (e.g., a homework assignment) into self-contained folders. Something like the below:\nC:\n|__ /Users\n    |__ /eugene\n        |__ /MUSA550\n            |__ /Homework1\n                 |__ homework1_notebook.ipynb\n                 |__ /Data\n                      |__ data.csv\nWith this, I could instead write pd.read_csv(\"Data/data.csv\"). Then, I could send Gritty my entire Homework1 folder or upload that folder to GitHub as a repository, and Gritty can run the notebook without making any changes. These are relative file paths, which point to the location of a file on a computer relative to the working directory (i.e., the folder where homework1_notebook.ipynb is saved).\nFor your homework assignments, the most straightforward way to structure your files is to download the entire GitHub repository for that assignment (see below). Then, you can create a Jupyter notebook in that folder and, when you’re finished, upload it to GitHub. This way, when we download the repository for grading, or you open the notebook on a different computer, everything will run without changes (assuming you used relative file paths)."
  },
  {
    "objectID": "resource/file-paths.html#glossary",
    "href": "resource/file-paths.html#glossary",
    "title": "File paths and working directories",
    "section": "Glossary",
    "text": "Glossary\nThese terms/commands work in Jupyter Notebooks, and they also apply to any command line tools you might encounter, like the Terminal, git bash, etc. except the Windows Command Prompt, Miniforge Prompt (which is actually just a wrapper around the Command Prompt), and Windows PowerShell.\nhome directory: Also referred to as ~. This is the directory for your particular user on your computer. In Windows, it’s usually something like C:/Users/eugene. If you open Terminal/Miniforge Prompt, it will be at this location by default.\nroot directory: Also referred to as /. This is the very highest level directory in your computer, where your operating system folders and such are located. We won’t be doing anything here, since deleting files can mess things up (I don’t think you can even open the root directory in the Windows File Explorer).\nworking directory: Also referred to as .. Relative file paths will be relative to this location on your computer. You can run the command pwd (“print working directory”) in either your Jupyter Notebook or the Terminal to see your current working directory. Note that ./subfolder/data.csv and subfolder/data.csv are the same; the first explicitly references the working directory, whereas it’s only implied in the second."
  }
]